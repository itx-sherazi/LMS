// import { Button } from "@/components/ui/button";
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
// import { Input } from "@/components/ui/input";
// import { Label } from "@/components/ui/label";
// import { Switch } from "@/components/ui/switch";
// import { InstructorContext } from "@/context/instructor-context";
// import { useContext } from "react";

// function CourseCurriculum() {

//     const {courseCurriculumFormData, setCourseCurriculumFormData}=useContext(InstructorContext)

//     const handleNewLecture = () => {
//         setCourseCurriculumFormData([
//             ...courseCurriculumFormData,
//             {
//                 ...setCourseCurriculumFormData[0]
//             }
//         ])
//     }
    
//     const handleCourseTitleChange = (event, currentIndex) => {
//         let cpyCourseCurriculumFormData =[...courseCurriculumFormData]

//         console.log("Updated state:", cpyCourseCurriculumFormData);

    
//     }
  

//     return (  
//         <Card>
//             <CardHeader>
//                 <CardTitle>Creat Course Curriculum</CardTitle>
//             </CardHeader>
//             <CardContent>
//                 <Button onClick={handleNewLecture}>Add Lecture</Button>
//                 <div className="mt-4 space-y-4">
//                     {
//                         courseCurriculumFormData.map((curriculumItem,index)=>(
//                             <div className="border p-5 rounded-md ">
//                                 <div className="flex gap-5 items-center">
//                                     <h3 className="font-semibold">Lecture{index + 1}</h3>

//                                      <Input
//                                      name={`title-${index +1}`}
//                                      placeholder="Enter lecture title"
//                                      className="max-w-96"
//                                      onChange={(event)=>handleCourseTitleChange(event, index)}
                                     
//                                      />
//                                      <div className="flex items-center space-x-2">
//                                         <Switch
                                        // cheked={false}
                                        // id={`freePreview-${index +1}`}
//                                         />
//                                         <Label htmlFor={`freePreview-${index +1}`}> Free Preview</Label>
//                                      </div>
//                                 </div>
                                // <div className="mt-6">
                                //     <Input type="file" accept="video/*" className="mb-4"/>
                                // </div>
//                             </div>
//                         ))
//                     }

//                 </div>
//             </CardContent>
//         </Card>
//     );
// }

// export default CourseCurriculum;


    import { Button } from "@/components/ui/button";
    import { Card, CardContent, CardTitle } from "@/components/ui/card";
    import { Checkbox } from "@/components/ui/checkbox";
    import { DropdownMenu, DropdownMenuContent, DropdownMenuRadioItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
    import { Label } from "@/components/ui/label";
    import { filterOptions, sortOptions } from "@/config";
import { AuthContext } from "@/context/auth-context";
    import { studentContext } from "@/context/student-context";
    import { fetchStudentViewCourseListService } from "@/services";
    import { DropdownMenuRadioGroup } from "@radix-ui/react-dropdown-menu";
    import { ArrowUpDown, ArrowUpDownIcon } from "lucide-react";
    import { useContext, useEffect, useState } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";

function createSearchParamsHelper(filterParams) {
    const queryParams = [];
  
    for (const [key, value] of Object.entries(filterParams)) {
      if (Array.isArray(value) && value.length > 0) {
        const paramValue = value.join(",");
  
        queryParams.push(`${key}=${encodeURIComponent(paramValue)}`);
      }
    }
  
    return queryParams.join("&");
  }
  
  function StudentViewCoursesPage() {
    const [sort, setSort] = useState("price-lowtohigh");
    const [filters, setFilters] = useState({});
    const [searchParams, setSearchParams] = useSearchParams();
    const {
      studentViewCoursesList,
      setStudentViewCoursesList,
      loadingState,
      setLoadingState,
    } = useContext(studentContext);
    const navigate = useNavigate();
    const { auth } = useContext(AuthContext);
  
    function handleFilterOnChange(getSectionId, getCurrentOption) {
      let cpyFilters = { ...filters };
      const indexOfCurrentSeection =
        Object.keys(cpyFilters).indexOf(getSectionId);
  
      console.log(indexOfCurrentSeection, getSectionId);
      if (indexOfCurrentSeection === -1) {
        cpyFilters = {
          ...cpyFilters,
          [getSectionId]: [getCurrentOption.id],
        };
  
        console.log(cpyFilters);
      } else {
        const indexOfCurrentOption = cpyFilters[getSectionId].indexOf(
          getCurrentOption.id
        );
  
        if (indexOfCurrentOption === -1)
          cpyFilters[getSectionId].push(getCurrentOption.id);
        else cpyFilters[getSectionId].splice(indexOfCurrentOption, 1);
      }
  
      setFilters(cpyFilters);
      sessionStorage.setItem("filters", JSON.stringify(cpyFilters));
    }
  
    async function fetchAllStudentViewCourses(filters, sort) {
      const query = new URLSearchParams({
        ...filters,
        sortBy: sort,
      });
      const response = await fetchStudentViewCourseListService(query);
      if (response?.success) {
        setStudentViewCoursesList(response?.data);
        setLoadingState(false);
      }
    }
  
    async function handleCourseNavigate(getCurrentCourseId) {
      const response = await checkCoursePurchaseInfoService(
        getCurrentCourseId,
        auth?.user?._id
      );
  
      if (response?.success) {
        if (response?.data) {
          navigate(`/course-progress/${getCurrentCourseId}`);
        } else {
          navigate(`/course/details/${getCurrentCourseId}`);
        }
      }
    }
  
    useEffect(() => {
      const buildQueryStringForFilters = createSearchParamsHelper(filters);
      setSearchParams(new URLSearchParams(buildQueryStringForFilters));
    }, [filters]);
  
    useEffect(() => {
      setSort("price-lowtohigh");
      setFilters(JSON.parse(sessionStorage.getItem("filters")) || {});
    }, []);
  
    useEffect(() => {
      if (filters !== null && sort !== null)
        fetchAllStudentViewCourses(filters, sort);
    }, [filters, sort]);
  
    useEffect(() => {
      return () => {
        sessionStorage.removeItem("filters");
      };
    }, []);
  
    console.log(loadingState, "loadingState");
  
    return (
      <div className="container mx-auto p-4">
        <h1 className="text-3xl font-bold mb-4">All Courses</h1>
        <div className="flex flex-col md:flex-row gap-4">
          <aside className="w-full md:w-64 space-y-4">
            <div>
              {Object.keys(filterOptions).map((ketItem) => (
                <div className="p-4 border-b">
                  <h3 className="font-bold mb-3">{ketItem.toUpperCase()}</h3>
                  <div className="grid gap-2 mt-2">
                    {filterOptions[ketItem].map((option) => (
                      <Label className="flex font-medium items-center gap-3">
                        <Checkbox
                          checked={
                            filters &&
                            Object.keys(filters).length > 0 &&
                            filters[ketItem] &&
                            filters[ketItem].indexOf(option.id) > -1
                          }
                          onCheckedChange={() =>
                            handleFilterOnChange(ketItem, option)
                          }
                        />
                        {option.label}
                      </Label>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </aside>
          <main className="flex-1">
            <div className="flex justify-end items-center mb-4 gap-5">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2 p-5"
                  >
                    <ArrowUpDownIcon className="h-4 w-4" />
                    <span className="text-[16px] font-medium">Sort By</span>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-[180px]">
                  <DropdownMenuRadioGroup
                    value={sort}
                    onValueChange={(value) => setSort(value)}
                  >
                    {sortOptions.map((sortItem) => (
                      <DropdownMenuRadioItem
                        value={sortItem.id}
                        key={sortItem.id}
                      >
                        {sortItem.label}
                      </DropdownMenuRadioItem>
                    ))}
                  </DropdownMenuRadioGroup>
                </DropdownMenuContent>
              </DropdownMenu>
              <span className="text-sm text-black font-bold">
                {studentViewCoursesList.length} Results
              </span>
            </div>
            <div className="space-y-4">
              {studentViewCoursesList && studentViewCoursesList.length > 0 ? (
                studentViewCoursesList.map((courseItem) => (
                  <Card
                    onClick={() => handleCourseNavigate(courseItem?._id)}
                    className="cursor-pointer"
                    key={courseItem?._id}
                  >
                    <CardContent className="flex gap-4 p-4">
                      <div className="w-48 h-32 flex-shrink-0">
                        <img
                          src={courseItem?.image}
                          className="w-ful h-full object-cover"
                        />
                      </div>
                      <div className="flex-1">
                        <CardTitle className="text-xl mb-2">
                          {courseItem?.title}
                        </CardTitle>
                        <p className="text-sm text-gray-600 mb-1">
                          Created By{" "}
                          <span className="font-bold">
                            {courseItem?.instructorName}
                          </span>
                        </p>
                        <p className="text-[16px] text-gray-600 mt-3 mb-2">
                          {`${courseItem?.curriculum?.length} ${
                            courseItem?.curriculum?.length <= 1
                              ? "Lecture"
                              : "Lectures"
                          } - ${courseItem?.level.toUpperCase()} Level`}
                        </p>
                        <p className="font-bold text-lg">
                          ${courseItem?.pricing}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                ))
              ) : loadingState ? (
                <Skeleton />
              ) : (
                <h1 className="font-extrabold text-4xl">No Courses Found</h1>
              )}
            </div>
          </main>
        </div>
      </div>
    );
  }
  
  export default StudentViewCoursesPage;



  const stripe = require("../../helpers/stripe");
const Order = require("../../models/Order");
const Course = require("../../models/Course");
const StudentCourses = require("../../models/StudentCourses");

const createOrder = async (req, res) => {
  try {
    const {
      userId,
      userName,
      userEmail,
      orderStatus,
      paymentMethod,
      paymentStatus,
      orderDate,
      instructorId,
      instructorName,
      courseImage,
      courseTitle,
      courseId,
      coursePricing,
    } = req.body;

    // Stripe Checkout Session Create
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      mode: "payment",
      success_url: `${process.env.CLIENT_URL}/payment-return?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.CLIENT_URL}/payment-cancel`,
      customer_email: userEmail,
      line_items: [
        {
          price_data: {
            currency: "USD",
            product_data: {
              name: courseTitle,
              images: [courseImage],
            },
            unit_amount: Math.round(coursePricing * 100),
          },
          quantity: 1,
        },
      ],
    });

    // Order Create in DB
    const newlyCreatedCourseOrder = new Order({
      userId,
      userName,
      userEmail,
      orderStatus,
      paymentMethod: "Stripe",
      paymentStatus: "Pending",
      orderDate,
      instructorId,
      instructorName,
      courseImage,
      courseTitle,
      courseId,
      coursePricing,
    });

    await newlyCreatedCourseOrder.save();

    res.status(201).json({
      success: true,
      data: {
        stripeSessionId: session.id,
        checkoutUrl: session.url,
        orderId: newlyCreatedCourseOrder._id,
      },
    });
  } catch (err) {
    console.log(err);
    res.status(500).json({
      success: false,
      message: "Error while creating Stripe payment!",
    });
  }
};

const capturePaymentAndFinalizeOrder = async (req, res) => {
  try {
    const { session_id, orderId } = req.body;

    const session = await stripe.checkout.sessions.retrieve(session_id);

    if (session.payment_status !== "paid") {
      return res.status(400).json({
        success: false,
        message: "Payment not successful",
      });
    }

    let order = await Order.findById(orderId);

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Order not found",
      });
    }

    order.paymentStatus = "paid";
    order.orderStatus = "confirmed";
    order.paymentId = session.payment_intent;

    await order.save();

    // Update Student Course Model
    const studentCourses = await StudentCourses.findOne({ userId: order.userId });

    if (studentCourses) {
      studentCourses.courses.push({
        courseId: order.courseId,
        title: order.courseTitle,
        instructorId: order.instructorId,
        instructorName: order.instructorName,
        dateOfPurchase: order.orderDate,
        courseImage: order.courseImage,
      });

      await studentCourses.save();
    } else {
      const newStudentCourses = new StudentCourses({
        userId: order.userId,
        courses: [
          {
            courseId: order.courseId,
            title: order.courseTitle,
            instructorId: order.instructorId,
            instructorName: order.instructorName,
            dateOfPurchase: order.orderDate,
            courseImage: order.courseImage,
          },
        ],
      });

      await newStudentCourses.save();
    }

    // Update Course Schema
    await Course.findByIdAndUpdate(order.courseId, {
      $addToSet: {
        students: {
          studentId: order.userId,
          studentName: order.userName,
          studentEmail: order.userEmail,
          paidAmount: order.coursePricing,
        },
      },
    });

    res.status(200).json({
      success: true,
      message: "Order confirmed",
      data: order,
    });
  } catch (err) {
    console.log(err);
    res.status(500).json({
      success: false,
      message: "Some error occurred!",
    });
  }
};

module.exports = { createOrder, capturePaymentAndFinalizeOrder };
